#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define NUM_THREADS 4
void *thread_function(void *arg) {
    int thread_num = *(int*)arg,i;
    printf("Thread %d started.\n", thread_num);
    for (i = 0; i < 10; i++) {
        printf("Thread %d: %d\n", thread_num, i);
    }
    printf("Thread %d finished.\n", thread_num);
    pthread_exit(NULL);
}
int main() {
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];
    int rc, i;
    for (i = 0; i < NUM_THREADS; i++) {
        printf("Main: creating thread %d\n", i);
        thread_args[i] = i;
        rc = pthread_create(&threads[i], NULL, thread_function, &thread_args[i]);
        if (rc) {
            printf("ERROR: return code from pthread_create() is %d\n", rc);
            exit(1);
        }
    }
    printf("Main: all threads created.\n");
    for (i = 0; i < NUM_THREADS; i++) {
        rc = pthread_join(threads[i], NULL);
        if (rc) {
            printf("ERROR: return code from pthread_join() is %d\n", rc);
            exit(1);
        }
    }
    printf("Main: all threads completed.\n");
    pthread_exit(NULL);
}
