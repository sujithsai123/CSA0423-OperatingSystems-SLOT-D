#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#define NUM_PHILOSOPHERS 5
pthread_t philosophers[NUM_PHILOSOPHERS];
pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];
void *philosopher(void *arg) {
    int id = *(int*)arg;
    int left_chopstick = id;
    int right_chopstick = (id + 1) % NUM_PHILOSOPHERS;
    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);
        printf("Philosopher %d is hungry and trying to pick up chopsticks.\n", id);
        pthread_mutex_lock(&chopsticks[left_chopstick]);
        printf("Philosopher %d picked up left chopstick %d.\n", id, left_chopstick);
        pthread_mutex_lock(&chopsticks[right_chopstick]);
        printf("Philosopher %d picked up right chopstick %d.\n", id, right_chopstick);
        printf("Philosopher %d is eating.\n", id);
        sleep(1);
        printf("Philosopher %d is done eating and putting down chopsticks.\n", id);
        pthread_mutex_unlock(&chopsticks[right_chopstick]);
        pthread_mutex_unlock(&chopsticks[left_chopstick]);
    }
}
int main() {
    int i;
    int philosopher_ids[NUM_PHILOSOPHERS];
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }
    return 0;
}
